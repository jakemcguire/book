# Current State of Interviewing

## Typical Interview

Many Silicon Valley tech companies follow the same playbook for interviews. A developer enters the recruiting pipeline by submitting a resume online or through a referral by a current employee. Someone from Human Resources filters resumes by a set of objective criteria, such as requiring candidates to have a Computer Science degree or previous work experience at a tech company.

Candidates who pass this initial gate are scheduled for a phone screener with a member of the engineering team. This 30-60 minute call will often involve a candidate introduction with background questions, then move into a coding challenge to verify the candidate has basic knowledge of programming. Some example questions:

- "What is the meaning of `this` in JavaScript?"
- "What are the four ways you can add CSS to an HTML file?"
- "What is the difference between the `===` and `==` operators in JavaScript?"

These questions can create both **false negatives** and **false positives**. Some candidates may be excellent at programming but struggle to communicate their knowledge clearly; these questions may eliminate candidates who are otherwise qualified but are non-native speakers or struggle with anxiety. Similarly, some candidates may lack programming expertise but pass these questions because they have memorized answers; questions like "contrast React with Angular" may advance candidates who simply read tech news regularly.

Candidates who pass the phone screener are invited to a final on-site interview. It is usually half-day process with four main interviews: an informational conversation with a recruiter or Human Resources employee to start and end the day, 60 minutes with an engineering manager to assess cultural fit, and two 60 minute "whiteboarding" interviews with developers.

The whiteboard interviews get their name because candidates write code on a whiteboard in front of 1-2 developers. An example interview challenge might be, "Write a function that will take a string of text and return the most frequently used word." Interviewers are not just looking for functioning code, but also how the candidate structures the problem and communicates his or her thought process.

An excellent candidate will ask some clarifying questions (e.g., "Can I assume the text is English? If not, how are words separated?" or "Would we consider an emoji a word?") then write some "pseudocode" to frame the approach before finally writing a full working example on the whiteboard. Excellent candidates will talk through their approach to the problem at each step. They will also write down some example data sets (e.g., testing the string "I wish that I wish I was") and expected outputs (e.g., "'I' should be the most common word in that sentence") to validate whether the code is working.

Mediocre candidates will often quickly jump into writing code, then become confused midway through and backtrack to an earlier step. They will struggle silently and require interviewer prompting to think through the problem out loud. They usually do not think ahead about test cases, which causes them to develop a solution that won't work for an obvious use case (e.g., a sentence with only one word) or that won't work beyond a small scale.

After the on-site interviews are complete, the engineering manager and interviewing developers will huddle with the recruiter to decide whether to extend a job offer. Many larger organizations will use a rubric to evaluate the candidate's performance, but smaller organizations often rely on intuition about how a candidate handled the technical portion of the interview. Both large and small organizations will rely on intuition for cultural fit -- a process that can lead to false negatives and unconscious bias towards otherwise qualified candidates.

There are several problems with this whiteboarding interview process:

*Candidates never touch a computer*. Because of this interview procdess, many organizations will hire a developer without ever watching that developer actually write code on a computer. There are dozens of tools in front-end development that augment developer productivity -- IDEs, version control, package managers, build tools, frameworks, test runners, Continuous Deployment tools, etc -- but a whiteboard interview tests none of them. Two candidates may have the same performance answering trivia questions on a whiteboard, but vastly different productivity levels when they actually use the tools of the trade.

*Candidates are evaluated for skills that are not part of their role*. It is a fine skill to be able to communicate in front of an audience about programming, but the vast majority of developers spend their days working alone on a problem with occasional written collaboration in an email or merge request. The whiteboarding interview rewards a performative approach that doesn't look like most software developers' day-to-day work.

*Candidates are evaluated for rarely-used knowledge*. Similarly, it is great if a developer knows how hash tables work and can explain the improvement in algorithmic complexity that they offer, but front-end development work is rarely constrained by algorithmic complexity. The data structures and algorithms that are drilled into Computer Science undergraduate students is usually abstracted away during front-end development by tools and frameworks. (To return to our example, a JavaScript developer who implemented his or her own hash table would be very unwise -- you get the same functionality with an Object.)


## Why We Got Here

These interviews yield some helpful information -- and they may be helpful for evaluating other programming skill sets -- but they are ill-suited for evaluating web developers. So why does the industry use those interview questions to evaluate web developers? There are three big reasons:

### Computing Has Changed

Until very recently, applications were frequently constrained by memory and processing speed. Understanding algorithmic complexity and optimizing computations could have enormous consequences for profitability. Engineers needed to squeeze as much out of their servers as possible because buying extra servers was expensive and time-consuming.

There were two big changes a decade ago: the rise of distributed computing (including both cloud computing and mobile devices in everyone's pocket) and the ubiquity of high-speed internet. Suddenly device memory constraints became much less important. Instead of squeezing every optimization out of a physical device, computations could be sent from devices off to a server farm for processing then sent back to the user's device. A poorly-optimized process would no longer constrain an application's throughput when it reached a single server's capacity -- processes could be parallelized and distributed, costing only the incremental computing power leased from the massive server farms maintained by Amazon, Microsoft, and Google.

[TODO: IMAGE COMPARING TWO WEB APPLICATIONS SHOWING DESIGN DIFFERENCES]

With front-end development less constrained by the relatively small memory and computing power of consumer devices, the challenge shifted from optimizing device performance to building compelling product experiences. It made more room for design and increased the importance of customer empathy when building software. Compare almost any enterprise web application built prior to 2008 with the explosion of customer-centric, mobile-first products built after 2008. The former look like they were built by backend developers with little regard for usability; the latter make technology serve what customers want, even when it's not computationally optimal. Interviews for front-end developers continued testing for skills that mattered when web applications were constrained by the devices they ran on; the standard whiteboard interview hasn't evolved to test what really matters when building delightful customer-centric experiences.

### Web Development Was Built for Novices

JavaScript is the world's most popular programming language.[^footnote1] It is also possibly the world's most hated programming language.

[TODO: A SHORT HISTORY OF JAVASCRIPT AND THE DOM]

### Architects Aren't Web Development Experts

[TODO: Framing fact from Stack Overflow surveys about background of architects, % coming from non-frontend roles]

Interviewers who are not experts in the interview subject are more likely to lean on factual questions, even when the facts are trivial. Questions like "What is a closure?" or "What is an IIFE?" are so popular because they have factual answers that do not rely on the interviewer having any subject matter expertise about the question. Candidates are routinely evaluated by the jargon they use in these answers, not whether they can actually use a closure to hide a variable from outer scopes or use an IIFE to immediately define and call a function.

Some questions -- like "What is the difference between a method and a function?" -- have almost no signal about whether someone would be a good front-end developer and routinely trip-up even professionals with years of hands-on experience. They belong to a category of questions that are meaningful in other languages -- usually the language in which the interviewer has expertise -- but have little value in assessing a front-end developer's JavaScript skills.


## Why Outdated Interviews Hurt Engineering Teams

These practices have unintentionally increased the number of false negatives in front-end interviewing: people who would be excellent developers are not hired because they stumbled on a question with little correlation to front-end developer skill.

Teams that do not have good ways to evaluate front-end developer talent during the interview process also lack ways to evaluate, develop, and retain their front-end talent after hiring. A better interview process also help organizations have clear standards that bring employees in at the right band and evaluate their progress toward the next band. Developers at the "Software Engineer II" level should be evaluated for "Software Engineer III" promotion against the same general criteria as new hires into that band. In reality, new hires are evaluated by arbitrary trivia to get a job offer then evaluated by performance for promotions. Things don't have to be this way, and this book aims to illustrate how performance can be the main criterion for hiring -- even with only a few hours with a candidate before extending an offer.

## What Has Changed in Our Industry

[^footnote1]: JavaScript language survey from Stack Overflow
